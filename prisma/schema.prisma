// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    subreddits SubredditSubscription[]
    posts      Post[]
    comments   Comment[]

    subredditsModerated SubredditModerator[] @relation("SubMods")
    postVote            PostVote[]

    // moderators Subreddit[] @relation("SubMods")
}

model Subreddit {
    id          String    @id @default(cuid())
    name        String    @unique
    title       String?
    description String?
    image       String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt

    // moderators User[] @relation("SubMods")

    posts Post[]

    users SubredditSubscription[]

    SubredditModerator SubredditModerator[]
}

model SubredditSubscription {
    subreddit   Subreddit @relation(fields: [subredditId], references: [id])
    subredditId String
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    joinedAt    DateTime  @default(now())

    @@id([subredditId, userId])
}

model SubredditModerator {
    // id String @id @default(cuid())

    user   User   @relation("SubMods", fields: [userId], references: [id])
    userId String

    subreddit   Subreddit @relation(fields: [subredditId], references: [id])
    subredditId String

    @@id([userId, subredditId])
}

model Post {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    votesCount     Int @default(0)
    downvotesCount Int @default(0)
    upvotesCount   Int @default(0)

    commentsCount Int @default(0)

    title   String
    content String?

    subredditId String
    subreddit   Subreddit @relation(fields: [subredditId], references: [id])

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    comments Comment[]
    PostVote PostVote[]
}

model PostVote {
    post   Post   @relation(fields: [postId], references: [id])
    postId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    magnitude Int

    @@id([userId, postId])
}

model Comment {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    content   String

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    postId String
    post   Post   @relation(fields: [postId], references: [id])
}
